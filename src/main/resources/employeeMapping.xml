<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.zhang.dao.EmployeeMapper">
<!--  
	namespace:名称空间。注：如果想要进行指定接口的绑定，则需要将其显示指定为接口的全类名
	id:唯一标识。注：如果需要进行指定端口的绑定，则需要将其id指定为方法的名称
	resultType:返回值类型[注:resultType永远是想要将数据库的一条记录封装成什么样的类型]
	databaseId:指定在databaseIdProvider中配置的数据库厂商的别名
	#{id}:从传递过来的参数中取出id值
-->

	<!-- public Map<Integer, Employee> getEmpsReturnMap(); -->
	<!-- 因为返回的数据库的记录到最后想要封装成为一个简单的Employee对象 所以填充为一个Employee -->
	<select id="getEmpsReturnMap" resultType="employee">
		SELECT * FROM EMPLOYEE
	</select>
	
	<!-- public Map<String, Object> getEmpByIdWithMap(Integer id); -->
	<!-- 因为返回的是一个集合类型 所以需要返回的是一个Map类型[因为你想要将数据封装成一个Map类型] -->
	<select id="getEmpByIdWithMap" resultType="map">
		SELECT * FROM EMPLOYEE WHERE ID = #{id}
	</select>

	<!-- public List<Employee> getEmps() -->
	<!-- resultType:要配置成为集合中的元素类型 -->
	<select id="getEmps" resultType="employee">
		SELECT * FROM EMPLOYEE
	</select>
	
	<select id="getEmpByMap" resultType="employee">
		SELECT * FROM EMPLOYEE WHERE ID = #{id} AND LAST_NAME = #{lastName}
	</select>

	<select id="getEmpByIdAndLastName" resultType="Employee">
		SELECT * FROM EMPLOYEE WHERE ID = #{id} AND LAST_NAME = #{param2}
	</select>
	
	<select id="getEmpById" resultType="Employee" databaseId="mysql">
		SELECT * FROM employee WHERE id = #{id}
	</select>
	
	<!--  
		parameterType:可以省略不写  如果要写的话  就使用别名或者全类名
		获取自增主键:
		mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGeneratedKeys();
		useGeneratedKeys="true":使用自增主键获取主键值策略
		keyProperty:指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javabean的哪个属性
	-->
	<insert id="addEmp" parameterType="Employee" useGeneratedKeys="true" keyProperty="id" databaseId="mysql">
		INSERT INTO employee(last_name, email,gender) 
			VALUES(#{lastName},#{email},#{gender})
	</insert>
	
	<!--  
		Oracle不支持自增:
			Oracle使用序列来模拟自增
			每次插入的数据的主键都是从序列中拿到的值:那么如何获取这个值呢?
	-->
	<insert id="addEmp" databaseId="oracle">
		<!-- 
			keyPropertry:指定查出的主键值封装给javaBean的哪个属性 
			order="BEFORE":指定sql在插入sql之前执行
					AFTER:指定sql在插入sql之后执行
			resultType:查出的结构返回值类型
			BEFORE:
				先运行selectKey查询id的sql 查出的id封装给javaBean的id属性
				再运行插入的sql 就可以取出id属性对应的值
			AFTER:
				先运行插入的sql(它会从序列中取出新值作为id)
				再运行selectKey查询id的sql
		-->
		<selectKey keyProperty="id" order="AFTER" resultType="Integer">
			<!-- 编写查询主键的sql语句 -->
			<!--
				BEFORE 
				SELECT employee_seq.nextval from dual 
			-->
			<!-- AFTER -->
			SELECT * employee_seq.currval from dual
		</selectKey>
		<!-- 插入的主键使用序列中拿到的 -->
			<!--
				BEFORE 		
				INSERT INTO employee(EMPLOYEE_ID, LAST_NAME, EMAIL)
					VALUES(#{id}, #{lastName}, #{email}) 
			-->
			<!-- AFTER -->
			INSERT INTO employee(EMPLOYEE_ID, LAST_NAME, EMAIL)
					VALUES(employee_seq.nextval, #{lastName}, #{email}) 
	</insert>
	
	<update id="updateEmp">
		UPDATE employee SET last_name = #{lastName}, email = #{email},
			gender = #{gender} WHERE id = #{id}
	</update>
	
	<delete id="deleteEmpById">
		DELETE FROM employee WHERE id = #{id}
	</delete>
</mapper>